{$IFNDEF CODEINSIGHT}
const
  COL_LOGIN_YELLOW = 65535;
  COL_LOGIN_WHITE = 16777215;
{$ENDIF}

type
  TRSLoginScreen = record(TInterfaceBase)
    LoginBox: TBox;
    PasswordBox: TBox;
    ResponseBox: TBox;
    WorldBox: TBox;
    ExistingUserBox: TBox;
    TryAgainBox: TBox;
    WarningBox: TBox;
 end;

var
  LoginScreen: TRSLoginScreen;

{*
TRSLoginScreen.__Setup
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure TRSLoginScreen.__Setup();

Setups the login screen, Called at the end of the file on compile.

Example:

.. code-block:: pascal

    LoginScreen.__Setup();
*}
{$IFNDEF CODEINSIGHT}
procedure TRSLoginScreen.__Setup;
begin
  with Self do
  begin
    SetName('Login screen');
    SetStatic(True);
    SetBounds(srl.DefaultClientBounds);

    LoginBox := [312, 242, 548, 253];
    PasswordBox := [340, 258, 548, 268];
    ResponseBox := [210, 190, 550, 233];
    WorldBox := [12, 464, 99, 496];
    ExistingUserBox := [390, 272, 529, 307];
    TryAgainBox := [315, 260, 449, 292];
    WarningBox := [234, 305, 367, 337];
  end;
end;
{$ENDIF}

function TRSLoginScreen.IsOpen: Boolean;
var
  P: TPoint;
begin
  Result := srl.FindText(p, 'Click to switch', 'StatChars07', COL_LOGIN_WHITE, 1, Self.WorldBox) and (P = [21, 485]);
end;

function TRSLoginScreen.IsWelcomeOpen: Boolean;
var
  P: TPoint;
begin
  Result := srl.FindText(P, 'Existing User', 'UpChars07_s', COL_LOGIN_WHITE, 1, Self.ExistingUserBox);
end;

function TRSLoginScreen.IsInvaildDetailsOpen: Boolean;
var
  P: TPoint;
begin
  Result := srl.FindText(P, 'Try again', 'SmallChars07', COL_LOGIN_WHITE, 1, Self.TryAgainBox);
end;

function TRSLoginScreen.IsWarningOpen: Boolean;
var
  P: TPoint;
begin
  Result := srl.FindText(P, 'Continue', 'UpChars07_s', COL_LOGIN_WHITE, 1, Self.WarningBox);
end;

function TRSLoginScreen.Open: Boolean;
var
  T: UInt64;
begin
  T := GetTickCount() + 10000;
  while (T > GetTickCount()) do
  begin
    if Self.IsOpen() then
    begin
      if Self.IsWelcomeOpen() then
        Mouse.Click(Self.ExistingUserBox, mouse_Left);
      if Self.IsWarningOpen() then
        Mouse.Click(Self.WarningBox, mouse_Left);
      if Self.IsInvaildDetailsOpen() then
        Mouse.Click(Self.TryAgainBox, mouse_Left);
    end;

    if Self.IsOpen() and (not Self.IsWelcomeOpen()) and (not Self.IsInvaildDetailsOpen()) and (not Self.IsWarningOpen()) then
      Exit(True);

    Wait(Random(50, 100));
  end;
end;

function TRSLoginScreen.IsCaret(B: TBox): Boolean;
var
  T: UInt64;
begin
  T := GetTickCount() + Random(600, 800);

  while (T > GetTickCount()) do
  begin
    if (CountColor(COL_LOGIN_YELLOW, B) > 0) then
      Exit(True);

    Wait(Random(50, 100));
  end;
end;

function TRSLoginScreen.SetCaret(B: TBox): Boolean;
begin
  if IsCaret(B) then
    Exit(True);
  Keyboard.PressKey(VK_TAB);
  if IsCaret(B) then
    Exit(True);
end;

function TRSLoginScreen.EnterLogin(Login: String): Boolean;
begin
  if (GetTextAtEx(Self.LoginBox, 0, 3, 3, COL_LOGIN_WHITE, 0, 'UpChars07_s') = Login) then
    Exit(True);

  if SetCaret(Self.LoginBox) then
  begin
    while (CountColor(COL_LOGIN_WHITE, Self.LoginBox) > 0) do
    begin
      Keyboard.PressKey(VK_BACK);

      Wait(Random(30, 130));
    end;

    Keyboard.Send(Login);

    Exit(True);
  end;
end;

function TRSLoginScreen.EnterPassword(Password: String): Boolean;
begin
  if SetCaret(Self.PasswordBox) then
  begin
    while (CountColor(COL_LOGIN_WHITE, Self.PasswordBox) > 0) do
    begin
      Keyboard.PressKey(VK_BACK);

      Wait(Random(30, 130));
    end;

    Keyboard.Send(Password);

    Exit(True);
  end;
end

function TRSLoginScreen.EnterDetails(Login, Password: String): Boolean;
begin
  if Self.Open() and EnterLogin(Login) and EnterPassword(Password) then
  begin
    Keyboard.PressKey(VK_RETURN);

    Exit(True);
  end;
end;

(*
TRSLoginScreen.OpenWorldSwitcher
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSLoginScreen.OpenWorldSwitcher(): Boolean;

Opens the world switcher.

.. note::

    - by Olly
    - Last Updated: 30 December 2014 by Olly

Example:

.. code-block:: pascal

  LoginScreen.OpenWorldSwitcher();
*)
function TRSLoginScreen.OpenWorldSwitcher(): Boolean;
begin
  if (WorldSwitcher.IsOpen()) then
    Exit(True);

  if Self.IsOpen() then
  begin
    Mouse.Click(Self.WorldBox, mouse_Left);

    if WorldSwitcher.isOpen(Random(2500, 3000)) then
      Exit(True);
  end else
    srl.Writeln('Cannot open world switcher - Login screen not open');
end;

(*
TRSLoginScreen.GetResponse
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function TRSLoginScreen.GetResponse(): String;

Returns the login response (ie: Error connecting to server);

Example:

.. code-block:: pascal

  Writeln(LoginScreen.GetResponse);
*)
function TRSLoginScreen.GetResponse: String;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  i: Integer;
begin
  if (FindColors(TPA, COL_LOGIN_YELLOW, Self.ResponseBox)) then
  begin
    ATPA := SplitTPAEx(TPA, 10, 1);
    SortATPAFromFirstPointY(ATPA, Point(0, 0));
    for i := 0 to High(ATPA) do
      Result += Trim(GetTextAtEx(GetTPABounds(ATPA[i]), 0, 3, 3, COL_LOGIN_YELLOW, 0, 'UpChars07_s'));
  end;
end;

(*
TRSLoginScreen.WaitResponse
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function TRSLoginScreen.WaitResponse(): String;

Waits for a login response (see GetResponse) to appear up to 15 seconds,
if Lobby screen is detected will return 'lobby'.

Example:

.. code-block:: pascal

  LoginScreen.OpenWorldSwitcher();
*)
function TRSLoginScreen.WaitResponse: String;
const
  VAILD_CONNECTING = 'Connecting to server...';
var
  T: UInt64;
begin
  // First wait for connectiong response
  T := GetTickCount() + 5000;
  while Self.IsOpen() and (Result <> VAILD_CONNECTING) and (T > GetTickCount()) do
  begin
    Result := GetResponse();

    Wait(Random(50, 100));
  end;

  // Wait until connecting response has gone
  while Self.IsOpen() and (Result = VAILD_CONNECTING) do
  begin
    Result := GetResponse();

    Wait(Random(50, 100));
  end;

  Result := GetResponse();
end;

function TRSLoginScreen.GetCurrentWorld: Int32;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
begin
  if FindColors(TPA, COL_LOGIN_WHITE, Self.WorldBox) then
  begin
    ATPA := SplitTPAEx(TPA, 10, 3);
    SortATPAFromFirstPointY(ATPA, [0, 0]);

    Result := StrToIntDef(ExtractFromStr(GetTextAtEx(GetTPABounds(ATPA[0]), 0, 3, 3, COL_LOGIN_WHITE, 0, 'UpChars07_s'), Numbers), -1);
  end;
end;

begin
  LoginScreen.__Setup();
end;

(*
Inventory
=========
The inventory file holds functions and procedures that are related to the runescape inventory
*)

(*
type TRSInventory
~~~~~~~~~~~~~~~~~
The type that holds functions and properties of the Runescape inventory gametab.
*)
type 
  TRSInventory = record(TInterfaceBase)
    FSlots: TBoxArray;
    LowSlot, HighSlot: Byte;
    ShiftDrop: Boolean;
  end;

{==| Table of Contents |=======================
 procedure TRSInventory.__setup();
 function TRSInventory.Open(): Boolean;
 function TRSInventory.IsOpen(): Boolean;
 function TRSInventory.PointToSlot(pt:TPoint): Int32;
 function TRSInventory.IsFull(): Boolean;
 function TRSInventory.IsSlotValid(idx: Int32): Boolean;
 function TRSInventory.GetSlotBox(idx:Int32): TBox;
 function TRSInventory.IsSlotUsed(idx:Int32): Boolean;
 function TRSInventory.GetUsedSlots(): TIntegerArray;
 procedure TRSInventory.DropItems(Slots:TIntegerArray = DROP_PATTERN_REGULAR);
 procedure TRSInventory.DropItemsExcept(ignoreSlots:TIntegerArray; dropPattern:TIntegerArray = DROP_PATTERN_REGULAR);
 function TRSInventory.FindMask(Mask: TMask; Tolerance:Int32 = 30; ContourTolerance:Int32 = 30; MaxToFind:Byte = 28): TIntegerArray;
 function TRSInventory.FindDTM(DTM: Integer; MaxToFind:Byte = 28): TIntegerArray; 
 function TRSInventory.FindBMP(BMP: Integer; Tolerance:Int32; MaxToFind:Byte = 28): TIntegerArray;
 function TRSInventory.Count(): Byte;
 function TRSInventory.GetActiveSlot(): Int8;
 function TRSInventory.ActivateSlot(Slot: Int32): Boolean;
}

(*
var Inventory
~~~~~~~~~~~~~
Variable that stores functions and properties of the Runescape inventory gametab.
*)
var 
  Inventory: TRSInventory;

  
(*
Drop patterns
~~~~~~~~~~~~~
Column wise  and "reversed" column wise (S-style):

``DROP_PATTERN_REGULAR``, ``DROP_PATTERN_REGULAR_R``


Column wise snake-style patterns and "reversed" version:

``DROP_PATTERN_SNAKE``, ``DROP_PATTERN_SNAKE_R``


By row, from to-left, down to bottom right, it's reverse starts in top-right down to bottom right.

``DROP_PATTERN_TOPDOWN``, ``DROP_PATTERN_TOPDOWN_R``
*)
const
    //Column wise and "reversed" column wise - normal pattern
    DROP_PATTERN_REGULAR: TIntegerArray = [0..27];
    DROP_PATTERN_REGULAR_R: TIntegerArray = [3,2,1,0, 7,6,5,4, 11,10,9,8, 15,14,13,12, 19,18,17,16, 23,22,21,20, 27,26,25,24];

    //Column wise snake and "reversed" version
    DROP_PATTERN_SNAKE: TIntegerArray  = [0,1,2,3, 7,6,5,4, 8,9,10,11, 15,14,13,12, 16,17,18,19, 23,22,21,20, 24,25,26,27];
    DROP_PATTERN_SNAKE_R: TIntegerArray = [3,2,1,0, 4,5,6,7, 11,10,9,8, 12,13,14,15, 19,18,17,16, 20,21,22,23, 27,26,25,24];

    //by row (and "reversed")
    DROP_PATTERN_TOPDOWN: TIntegerArray = [0,4,8,12,16,20,24,  1,5,9,13,17,21,25,  2,6,10,14,18,22,26, 3,7,11,15,19,23,27];
    DROP_PATTERN_TOPDOWN_R: TIntegerArray = [3,7,11,15,19,23,27, 2,6,10,14,18,22,26, 1,5,9,13,17,21,25,  0,4,8,12,16,20,24];

    //Spiral pattern: Starts in slot 0(top left corner of invy) and circles in a clockwise spiral
    DROP_PATTERN_SPIRAL: TIntegerArray   = [0,1,2,3, 7,11,15,19,23, 27,26,25,24, 20,16,12,8,4, 5, 6,10,14,18,22, 21,17,13,9]; 

{$IFNDEF CODEINSIGHT}
procedure TRSInventory.__Setup();
var 
  i:Int32;
  SlotBounds:TBox = [558,211,725,462];
begin
  with Self do
  begin
    FName := 'Inventory';
    FStatic := True;
  
    FBounds := [548,206,735,464];
    FSlots := SlotBounds.Partition(7, 4, -2);
    for i:=0 to High(FSlots) do
    begin
      FSlots[i].x1 += 3;
      FSlots[i].x2 -= 3;
    end;
   
    LowSlot  := 0;
    HighSlot := 27;
  end;
end;

procedure TRSInventory.Debug();
var
  BMP:TMufasaBitmap;
begin
  BMP := GetMufasaBitmap( BitmapFromClient(SRL.DefaultClientBounds) );
  BMP.DrawBoxes(Self.FSlots, False, $0000FF);
  BMP.DrawBox(FBounds, False, $00FF00);
  BMP.Debug();
  BMP.Free();
end;
{$ENDIF}

(*
Inventory.ErrorPattern
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.ErrorPattern(Pattern: TIntArray=DROP_PATTERN_REGULAR; ErrorChance:Int32=5): TIntegerArray;

Given a pattern and an upper limit of errors in percent, it will swap around some values and return a "errorized" drop-pattern

**Example:**

.. code-block:: pascal

   Inventory.DropItems(Inventory.ErrorPattern(DROP_PATTERN_REGULAR, 10));
*)
function TRSInventory.ErrorPattern(Pattern: TIntArray=DROP_PATTERN_REGULAR; ErrorChance:Int32=5): TIntegerArray;
var i,j,h,k,tmp: Int32;
begin
  Result := Copy(Pattern);
  h := High(Pattern);
  i := 1;
  while i < h do
  begin
    if Random(100) < ErrorChance then
    begin
      case Random(0,2) of
        0:begin
            tmp := Result[i];
            for j:=i+1 to h do Result[j-1] := Result[j];
            Result[h] := tmp;
          end;
        1:begin
            Swap(Result[i+1],Result[i]);
          end;
        2:begin
            tmp := Result[i];
            k := Random(i+1,h);
            for j:=i+1 to k do Result[j-1] := Result[j];
            Result[k] := tmp;
          end;
      end;
    end;
    Inc(i);
  end;
end;

(*
Inventory.Open
~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.Open(): Boolean;

Opens the interface
*)
function TRSInventory.Open(): Boolean;
begin
  Result := Gametabs.Open(tabInventory);
end;


(*
Inventory.IsOpen
~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.IsOpen(maxWait:Int32=0): Boolean;

Checks if the interface is already open.
*)
function TRSInventory.IsOpen(maxWait:Int32=0): Boolean;
begin
  Result := Gametabs.IsOpen(tabInventory, maxWait);
end;


(*
Inventory.IsSlotValid
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.IsSlotValid(idx: Int32): Boolean;

Returns true if the given slot is within a valid range.

.. note:: by slacky
*)
function TRSInventory.IsSlotValid(idx: Int32): Boolean;
begin
  Result := InRange(idx, Low(Self.FSlots), High(Self.FSlots));
end;

(*
Inventory.PointToSlot
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.PointToSlot(pt:TPoint): Int32;

Returns the slot-index under the given TPoint. 
If it's not over a slot then -1 is returned

.. note:: by slacky
*)
function TRSInventory.PointToSlot(pt:TPoint): Int32;
begin
  if not(PointInBox(Pt, Self.FBounds)) then
    Exit(-1);
  
  for Result:=0 to High(self.FSlots) do
    if PointInBox(pt, Self.FSlots[Result]) then
      Exit;
  Result := -1;
end;

(*
Inventory.MouseSlot
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  procedure TRSInventory.MouseSlot(idx:Int32; btn: Integer = mouse_Move);

Moves the moise over the given slot-index.

.. note:: by slacky
*)
procedure TRSInventory.MouseSlot(idx:Int32; btn:Integer=mouse_Move);
begin
  if not(self.Open()) then
    Exit();

  if self.IsSlotValid(idx) then
  begin
    Mouse.Move(self.FSlots[idx])
    if (btn <> mouse_Move) then
      Mouse.Click(btn);
  end else
    {notify index out of range};
end;

(*
Inventory.IsFull
~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.IsFull(): Boolean;

Returns ``True`` if the inventory can't hold anymore items

.. note:: by slacky
*)
function TRSInventory.IsFull(): Boolean;
var
  b:TBox;
begin
  if not(self.Open()) then
    Exit();

  for b in self.FSlots do
    if (CountColor($10000, b.x1,b.y1,b.x2,b.y2) = 0) then
      Exit(False);

  Result := True;
end;

(*
Inventory.GetSlotBox
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.GetSlotBox(idx:Int32): TBox;

Returns the bounding box covering the given slot-index.

.. note:: by slacky
*)
function TRSInventory.GetSlotBox(idx:Int32): TBox;
begin
  if self.IsSlotValid(idx) then
    Result := Self.FSlots[idx]
  else
    {notify index out of range};
end;

(*
Inventory.IsSlotUsed
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.IsSlotUsed(idx:Int32): Boolean;

Returns true if the given slot is occupied.

.. note:: by slacky
*)
function TRSInventory.IsSlotUsed(idx:Int32; DoOpen:Boolean=True): Boolean;
var
  b: TBox;
begin
  if (DoOpen) and not(self.Open()) then
    Exit(False);

  b := self.FSlots[idx];
  Result := CountColor($10000, b.x1, b.y1, b.x2, b.y2) > 0;
  if (not Result) then
    Result := CountColor(1777700, b.x1, b.y1, b.x2, b.y2) > 0;
end;

(*
Inventory.GetUsedSlots
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.GetUsedSlots(idx:Int32): TIntegerArray;

Returns all the occupied slot-indices.

.. note:: by slacky
*)
function TRSInventory.GetUsedSlots(): TIntegerArray;
var
  i,j: Int32;
begin
  if not(self.Open()) then
    Exit();

  SetLength(Result, 28);
  for i:=0 to High(self.FSlots) do
    if Self.IsSlotUsed(i, False) then
      Result[inc(j)-1] := i;
  SetLength(Result, j);
end;

(*
Inventory.Count
~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.Count: Int32;

Returns the number of used slots
*)
function TRSInventory.Count: Int32; overload
begin
  Result := Length(Self.GetUsedSlots());
end;

(*
Inventory.DropItem
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSInventory.DropItem(Slot: Int32; UpText:TStringArray=[]): Boolean;

Drops the given item.
*)
function TRSInventory.DropItem(Slot: Int32; UpText:TStringArray=[]): Boolean;
var
  idx,swt: Int32;
  RealeaseShift, ShiftAlreadyDown: Boolean;
label
  START;
begin
  if not(self.Open()) then
    Exit();

  IsKeyDown(VK_SHIFT); // clear cache

  ShiftAlreadyDown := IsKeyDown(VK_SHIFT);
  RealeaseShift    := not ShiftAlreadyDown;

  START:

  if shiftDrop and (not ShiftAlreadyDown) then
  begin
    Keyboard.KeyDown(VK_SHIFT);
    WaitEx(110,10);
  end;

  if self.IsSlotValid(Slot) and self.IsSlotUsed(Slot, False) then
  begin
    Mouse.Move(self.FSlots[Slot]);

    if (UpText <> []) then
    begin
      swt := GetTimeRunning() + 50;
      Wait(0,250,wdLeft);                //for uptext to refresh, and antiban
      Wait(Max(1,swt-GetTimeRunning())); //we need min 50ms tho
      if not mainscreen.IsUpText(UpText) then
        Exit(False);
    end;

    if (not ShiftDrop) then
      Result := ChooseOption.MissSelect('Drop', 'Examine')
    else
    begin
      Mouse.Click(mouse_Left);
      Result := (self.GetActiveSlot() = -1);
      if (not Result) then
      begin
        Self.MouseSlot(self.GetActiveSlot(), mouse_Left);
        ShiftAlreadyDown := False;
        goto START;
      end;
    end;

    Wait(0,250,wdLeft);
  end;

  if ShiftDrop and (RealeaseShift) then
  begin
    WaitEx(120,10);
    Keyboard.KeyUp(VK_SHIFT);
  end;
end;

(*
Inventory.DropItems
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.DropItems(Slots:TIntegerArray = DROP_PATTERN_REGULAR);

Drops the given items. It's order-sensitive which means unless you want it to 
jump randomly all over the inventory dropping items, you give it a ordered drop-pattern.

.. note:: by slacky

**Examples:**

.. code-block:: pascal

    // drops all items in a "snake order" / "Z"-order
    Inventory.DropItems(DROP_PATTERN_SNAKE);

.. code-block:: pascal

    Inventory.DropItems([0..3]); // drops the four first items
*)
procedure TRSInventory.DropItems(Slots:TIntegerArray = DROP_PATTERN_REGULAR; UpText:TStringArray=[]);
var
  idx: Int32;
begin
  if not(self.Open()) then
    Exit();

  if ShiftDrop then
  begin
    Keyboard.KeyDown(VK_SHIFT);
    WaitEx(110,10);
  end;

  for idx in Slots do
    if Self.DropItem(idx, UpText) then
      Wait(10,400,wdLeft);

  if ShiftDrop then
  begin
    WaitEx(120,10);
    Keyboard.KeyUp(VK_SHIFT);
  end;
end;


(*
Inventory.DropItemsExcept
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  procedure TRSInventory.DropItemsExcept(ignoreSlots:TIntegerArray; Slots:TIntegerArray = DROP_PATTERN_REGULAR);

Drops all the given items ``Slots`` except for the items in ``IgnoreSolots``

.. note:: by slacky
*)
procedure TRSInventory.DropItemsExcept(IgnoreSlots:TIntegerArray; Slots:TIntegerArray = DROP_PATTERN_REGULAR);
var
  i,j: Int32;
  ptrn: TIntegerArray;
begin
  SetLength(ptrn, 28);
  for i:=0 to High(Slots) do
    if not(InIntArray(ignoreSlots,Slots[i])) then
      ptrn[inc(j)-1] := Slots[i];

  SetLength(ptrn, j);
  Self.DropItems(ptrn);
end;

(*
Inventory.FindXXXX
~~~~~~~~~~~~~~~~~~~
.. pascal::
  function TRSInventory.FindMask(Mask: TMask; Tolerance, ContourTolerance:Int32 = 30; MaxToFind:Byte = 0): TIntArray;
  function TRSInventory.FindDTM(DTM: Integer; MaxToFind:Byte = 0): TIntArray; overload;
  function TRSInventory.FindBMP(BMP: Integer; Tolerance:Int32; MaxToFind:Byte = 0): TIntArray; overload;

Find the slots with the given item defined by a `TMask`, `DTM`, or `BMP`.
The last parameter ``MaxToFind`` defines how many you want us to find, by default
it will look for all, but can be used to only search for 1 item if that's all you need.

**Example:**

.. pascal::
   items := Inventory.FindMask(myMask);
   if itemArr = [] then
     WriteLn('Not found')
   else
     WriteLn('Found in slots: ', items);
*)
function TRSInventory.FindMask(Mask: TMask; Tolerance, ContourTolerance: Int32=30; MaxToFind: Byte=0): TIntArray;
begin
  if self.Open() then
    Result := srl.FindMaskInTBA(Mask, Tolerance, ContourTolerance, Self.FSlots, MaxToFind);
end;

function TRSInventory.FindDTM(DTM: Integer; MaxToFind: Byte=0): TIntArray;
begin
  if self.Open() then
    Result := srl.FindDTMInTBA(DTM, Self.FSlots, MaxToFind);
end;

function TRSInventory.FindBMP(BMP: Integer; Tolerance: Int32; MaxToFind: Byte=0): TIntArray;
begin
  if self.Open() then
    Result := srl.FindBMPInTBA(GetMufasaBitmap(BMP), Tolerance, Self.FSlots, MaxToFind);
end;

(*
Inventory.Count
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.Count(Mask: TMask; Tolerance, ContourTolerance:Int32=30): Int32; overload;
  function TRSInventory.Count(DTM: Integer): Int32; overload;
  function TRSInventory.Count(BMP: Integer; Tolerance:Int32): Int32; overload;

Counts the number of slots containing this item
*)
function TRSInventory.Count(Mask: TMask; Tolerance, ContourTolerance:Int32=30): Int32; overload;
begin
  Result := Length(Self.FindMask(Mask,Tolerance,ContourTolerance,28));
end;

function TRSInventory.Count(DTM: Integer): Int32; overload;
begin
  Result := Length(Self.FindDTM(DTM));
end;

function TRSInventory.Count(BMP: Integer; Tolerance:Int32): Int32; overload;
begin
  Result := Length(Self.FindBMP(BMP,Tolerance,28));
end;

(*
Inventory.Contains
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.Contains(Mask: TMask; Tolerance, ContourTolerance:Int32=30): Boolean;
  function TRSInventory.Contains(DTM: Integer): Boolean; overload;
  function TRSInventory.Contains(BMP: Integer; Tolerance:Int32): Boolean; overload;

Returns true if the inventory contains the given item
*)
function TRSInventory.Contains(Mask: TMask; Tolerance, ContourTolerance:Int32=30): Boolean;
begin
  Result := Length(Self.FindMask(Mask,Tolerance,ContourTolerance,1)) <> 0;
end;

function TRSInventory.Contains(DTM: Integer): Boolean; overload;
begin
  Result := Length(Self.FindDTM(DTM,1)) <> 0;
end;

function TRSInventory.Contains(BMP: Integer; Tolerance:Int32): Boolean; overload;
begin
  Result := Length(Self.FindBMP(BMP,Tolerance,1)) <> 0;
end;


(*
Inventory.GetActiveSlot
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.GetActiveSlot(): Int8;

Returns the index to the current active slot, returns ``-1`` if none.
*)
function TRSInventory.GetActiveSlot(): Int8;
var
  i: Integer;
  b: TBox;
begin
  if not(self.Open()) then Exit();

  Result := -1;
  for i := 0 to High(Self.FSlots) do
  begin
    b := self.FSlots[i];
    if (CountColor(16777215, b.X1, b.Y1 + 15, b.X2, b.Y2) > 10) then
      Exit(i);
  end;
end;


(*
Inventory.Use
~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.Use(Slot: Int32): Boolean;

RS correct alias for ``Inventory.ActivateSlot``.
*)
function TRSInventory.Use(Slot: Int32): Boolean;
begin
  Result := Self.ActivateSlot(Slot);
end;

function TRSInventory.IsSlotActivated(Slot: Int32; Time: Int32 = 0): Boolean;
var
  T: UInt64 := GetTickCount() + Time;
begin
  repeat
    if Self.GetActiveSlot() = Slot then
      Exit(True);

    if Time > 0 then
      Wait(50);
  until (GetTickCount() >= T);
end;

(*
Inventory.ActivateSlot
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.ActivateSlot(Slot: Int32): Boolean;

Activates (Presses) the given slot, however if ``Slot`` is ``-1`` then it will disable the current active slot.
*)
function TRSInventory.ActivateSlot(Slot: Int32): Boolean;
var
  i: Int32;
begin
  if (Slot = -1) then
  begin
    Slot := Self.GetActiveSlot();
    if Slot > -1 then
      Inventory.MouseSlot(Slot, MOUSE_LEFT);

    Result := not Self.IsSlotActivated(Slot, 500);
  end else
  begin
    if Self.GetActiveSlot() >= 0 then
    begin
      if Self.GetActiveSlot() = Slot then
        Exit(True);

      Self.MouseSlot(Self.GetActiveSlot(), MOUSE_LEFT);
    end;

    Self.MouseSlot(Slot);

    if Mainscreen.IsUptext('Use ') then
      Mouse.Click(MOUSE_LEFT)
    else
      ChooseOption.Select('Use');

    Result := Self.IsSlotActivated(Slot, 500);
  end;
end;


(*
Inventory.WaitCount
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.WaitCount(Amount: Int32; Time: Int32; Compare: TComparator = __EQ__): Boolean;

Waits for intentory amount to meet expected size. By default it waits till it's equal
to given Amount, but can wait till it's not equal, less than or greater than.
*)
function TRSInventory.WaitCount(Amount: Int32; Time: Int32; Compare: EComparator = __EQ__): Boolean;
var
  T: UInt64;
begin
  T := GetTickCount() + Time;

  while (T > GetTickCount()) do
  begin
    case Compare of
      __LT__: if (Self.Count() < Amount) then Exit(True);
      __GT__: if (Self.Count() > Amount) then Exit(True);
      __EQ__: if (Self.Count() = Amount) then Exit(True);
      __NE__: if (Self.Count() <> Amount) then Exit(True);
    end;

    Wait(Random(30, 60));
  end;
end;


begin
  Inventory.__Setup();
end;

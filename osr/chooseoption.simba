(*
ChooseOption
=======
The ChooseOption file holds functions and procedures that are related 
to the runescape ChooseOption-menu
*)

type
  TOption = record
    Str: String;
    Bounds: TBox;
  end;
  TOptionArray = Array of TOption;

(*
type TRSChooseOption
~~~~~~~~~~~~~~~
The type that holds functions and properties of the Runescape ChooseOption-menu.
*)
type
  TRSChooseOption = record 
    Bounds:TBox;
    {$IFNDEF CODEINSIGHT}
    BoxBitmap: Int32;
    BoxBitmap_Width:Int32;
    BoxBitmap_Height:Int32;
    {$ENDIF}
  end;

(*
var inventory
~~~~~~~~~~~
Variable that stores functions and properties of the Runescape ChooseOption-menu.
*)
var
  ChooseOption: TRSChooseOption;

{$IFNDEF CODEINSIGHT}
procedure TRSChooseOption.__setup();
begin
  BoxBitmap := BitmapFromString(20, 18, 'meJxzD4l1pwAxkAsGj15Mv+DyGp' +
        'ogXBmyemL04lEzgHqxhgPxehkwwoEkN9NCLwMRcYRHL5rvSNVLPBhAvWQjAO6IcGE=');
  GetBitmapSize(BoxBitmap, BoxBitmap_Width, BoxBitmap_Height);
end;

procedure TRSChooseOption.__free(); 
begin 
  FreeBitmap(BoxBitmap); 
end;

//Finds the optionbox using a simple bitmap (works very well).
function TRSChooseOption.__find(var Pos:TPoint; tryTime:Int32=-1): Boolean;
var 
  t: UInt64;
begin
  if tryTime < 0 then
    tryTime := Random(1500,2500);

  t := GetTickCount64() + tryTime;
  repeat
    Result := FindBitmap(BoxBitmap, pos.x, pos.y);
    if Result then
    begin
      pos.y += BoxBitmap_Height;
      Exit;
    end;
    Wait(Random(50,70));
  until (GetTickCount64() > t);
end;
{$ENDIF}


(*
ChooseOption.Open
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSChooseOption.Open(): Boolean;

Opens the optionbox, returns true if it worked.

.. note:: by slacky
*)
function TRSChooseOption.Open(tryTime:Int32=-1): Boolean;
begin
  Mouse.Click(mouse_right);
  Result := self.Find(tryTime);
end;


(*
ChooseOption.Open
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSChooseOption.Open(Box:TBox): Boolean; overload;

Opens the menu and stores it's bounds, returns true if it worked.

.. note:: by slacky
*)
function TRSChooseOption.Open(Box:TBox; tryTime:Int32=-1): Boolean; overload;
begin
  Mouse.Click(Box, mouse_right);
  Result := self.Find(tryTime);
end;


(*
ChooseOption.IsOpen
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSChooseOption.IsOpen(): Boolean;

Checks if the menu is open, it repeats the check for a +/-2 sec if it's ``False`` (expecting it to open).

.. note:: by slacky
*)
function TRSChooseOption.IsOpen(tryTime:Int32=-1): Boolean;
var _:TPoint;
begin
  if tryTime < 0 then
    tryTime := Random(1500,2500);
  Result := self.__find(_, tryTime);
end;

(*
ChooseOption.IsClosed
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSChooseOption.IsClosed(): Boolean;

Checks if the menu is closed, it repeats the check for a +/-650ms if it's ``True`` (expecting it to close).

.. note:: by slacky
*)
function TRSChooseOption.IsClosed(maxWaitTime:Int32=-1; IntervalMS:Int32=25): Boolean;
var t:UInt64;
begin
  if maxWaitTime < 0 then
    maxWaitTime := Random(500,800);
  t := GetTickCount64() + maxWaitTime;
  while self.IsOpen(1) and (GetTickCount64() < t) do
    Wait(IntervalMS);
  Result := not(self.IsOpen(1));
end;

(*
ChooseOption.Find
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSChooseOption.Find(): Boolean;

Is used internally to find the option-menu, and store the coordinates in the instance.
Returns True if it's found.

.. note:: by slacky
*)
function TRSChooseOption.Find(tryTime:Int32=-1): Boolean;
var
  pt: TPoint;
  B:TBox;
  TPA:TPointArray;
  ATPA:T2DPointArray;
begin
  Self.Bounds := [0,0,0,0];
  Result := Self.__find(pt, tryTime);
  if Result then
  begin
    B := GetClientBounds();
    FindColors(TPA, 0, pt.x,pt.y,B.x2,B.y2);
    if (TPA = []) then
      RaiseException('It''s impossible');

    ATPA := ClusterTPAEx(TPA,1,1);
    SortATPAFromFirstPoint(ATPA, pt);
    
    Self.Bounds := GetTPABounds(ATPA[0]);
    Self.Bounds.Expand(1);
    Self.Bounds.LimitTo(B);
  end;
end;

(*
ChooseOption.GetOptions
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSChooseOption.GetOptions(): TOptionArray;

Returns each option in the menu.

.. note:: by slacky
*)
function TRSChooseOption.GetOptions(): TOptionArray;
var
  b: TBox;
  i,bmp,bmp2:Int32;
begin
  if not(self.Find(1)) then
    self.Open();
  
  with self.Bounds do
  begin
    if (x1=x2) or (y1=y2) then
      Exit;

    bmp := BitmapFromClient(x1,y1,x2,y2);
    FastReplaceColor(bmp,4674653,0);
    ThresholdAdaptiveBitmap(bmp,0,255,False,TM_Mean,-1);
    
    SetLength(Result, (y2 - y1 + 1) div 15);
    for i:=0 to High(Result) do
    begin
      B.x1 := 2;
      B.y1 := i * 15 + 2;
      B.x2 := (x2 - x1) - 2;
      B.y2 := B.y1 + 15;
      if B.y2 <= y2-y1 then
      begin
        bmp2 := CopyBitmap(bmp);
        CropBitmap(bmp2, B.x1,B.y1,B.x2,B.y2);
        Result[i].str := ocr.RecognizeEx(BitmapToMatrix(bmp2),FontSetting(255,1), UpFont);
        FreeBitmap(bmp2);
      end;
      B.Offset(Point(x1, y1));
      Result[i].bounds := B;
    end;
    FreeBitmap(bmp);
  end;
end;

(*
ChooseOption.Select
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSChooseOption.Select(SubStrings:TStringArray; mouseAction:Int32=mouse_left; AClose:Boolean=True; CaseSensitive:Boolean=True): Boolean;

By default it will click the given option, if not found the menu is closed.
Returns true if the select-action was performed.
- moves the mouse to the first match of the given options `SubStrings`.
- left-clicks it `mouseAction:Int32=mouse_left;`
- if it's not found option-menu will be closed AClose `AClose:Boolean=True;`
- search can be case-insensitive `CaseSensitive:Boolean=True`
  
.. note:: by slacky
*)
function TRSChooseOption.Select(SubStrings:TStringArray; mouseAction:Int32=mouse_left; AClose:Boolean=True; CaseSensitive:Boolean=True): Boolean;
var
  Choices: TOptionArray;
  i,j,L:Int32;
begin
  Choices := Self.GetOptions();
  L := Length(Choices);
  if L = 0 then
    Exit(False);

  for i:=0 to L-1 do
    for j:=0 to High(SubStrings) do
      case CaseSensitive of
        True:
          if Pos(SubStrings[j],Choices[i].str) <> 0 then
          begin
            Wait(Random(80,270));
            Mouse.Click(Choices[i].bounds, mouseAction);
            Exit(self.IsClosed());
          end;
        False:
          if Pos(Lowercase(SubStrings[j]),Lowercase(Choices[i].str)) <> 0 then
          begin
            Wait(Random(80,270));
            Mouse.Click(Choices[i].bounds, mouseAction);
            Exit(self.IsClosed());
          end;
      end;

  Wait(Random(80,270));
  if AClose then
    Self.Close();
end;

function TRSChooseOption.Select(Option: String; mouseAction:Int32=mouse_left; AClose:Boolean=True; CaseSensitive:Boolean=True): Boolean; overload;
begin
  Result := Self.Select([Option], mouseAction, AClose, CaseSensitive);
end;

(*
ChooseOption.Close
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSChooseOption.Close(): Boolean;

Closes the optionbox by dragging the mouse away from it, if that 
failed it clicks the "Close"-option.

.. note:: by slacky
*)
function TRSChooseOption.Close(tryTime:Int32=-1): Boolean;
var
  B:TBox;
  pt,dest:TPoint;
  dir:PPoint;

  procedure TrackMovment(a:Pointer; b:TShiftState; x,y:Int32);
  var p:TPoint;
  begin
    if not ChooseOption.__find(p,0) then
      RaiseException('Finally');
  end;
begin
  if self.IsClosed(tryTime) then Exit(True);
  mouse.SetOnMouseMove(Pointer(@TrackMovment));
  with self.Bounds do B := [x1,y1-BoxBitmap_Height,x2,y2];

  pt := mouse.GetPosition();
  dir := [Abs(pt.x - B.x1), Pi];
  if dir.R > Abs(pt.y - B.y1) then dir := [Abs(pt.y - B.y1), -(Pi/2)];
  if dir.R > Abs(pt.x - B.x2) then dir := [Abs(pt.x - B.x2), 0];
  if dir.R > Abs(pt.y - B.y2) then dir := [Abs(pt.y - B.y2), (Pi/2)];

  dir.T := (dir.T-Pi/3) + Random()*((dir.T+Pi/3) - (dir.T-Pi/3));
  dest := [pt.x+Round(300*Cos(dir.T)), pt.y+Round(300*Sin(dir.T))];
  try
    mouse.Move(dest);
    self.Select(['Cancel']);
    Result := self.IsClosed(tryTime);
  except
    Result := self.IsClosed(tryTime);
  end;
  mouse.SetOnMouseMove(nil);
end;

begin
  ChooseOption.__setup();
  AddOnTerminate(@ChooseOption.__free);
end;



(*
T2DPointArray
=============
T2DPointArray related methods
*)

//--| Type helpers |----------------------------------------------------------->
//----------------------------------------------------------------------------->
procedure T2DPointArray.Append(const Value: TPointArray);
var top:Int32;
begin
  top := Length(Self);
  SetLength(self, top+1);
  Self[top] := Value;
end;

procedure T2DPointArray.Insert(const Value: TPointArray; Index: Integer);
var
  l: UInt32;
begin
  l := Length(Self);
  if (l <= Index) then
  begin
    Self.Append(Value);
    Exit();
  end;
  
  SetLength(Self, l + 1);
  MemMove(Self[Index], self[Index + 1], (L - Index) * SizeOf(self[0]));
  Self[Index] := Value;
end;

procedure T2DPointArray.Del(const Index:Int32; const Count:Int32=1);
begin
  Delete(Self, Index, Count);
end;

function T2DPointArray.Len(): Integer;
begin
  Result := Length(Self);
end;

procedure T2DPointArray.Remove(const Value: TPointArray; const All: Boolean = False);
var
  i: Int32;
  lst: TIntegerArray;
begin
  if (not All) then
  begin
    i := Self.Find(Value);
    if i >= 0 then Self.Del(i);
    Exit;
  end;
  
  lst := Self.FindAll(Value);
  for i:=High(lst) downto 0 do
    Self.Del(lst[i]);
end;

function T2DPointArray.Pop(): TPointArray;
var
  h: Integer;
begin
  h := High(Self);
  Result := Self[h];
  SetLength(Self, h);
end;

procedure T2DPointArray.Extend(Arr:T2DPointArray);
var
  i: Int32;
begin
  for i := 0 to High(Arr) do
    Self := Self + Copy(Arr[i]);
end;

function T2DPointArray.Find(const Value: TPointArray): Integer; constref;
begin
  for Result:=0 to High(Self) do
    if Self[Result].Equals(Value) then
      Exit;
  Result := -1;
end;

function T2DPointArray.FindAll(const Value: TPointArray): TIntegerArray; constref;
var
  i: UInt32;
begin
  for i:=0 to High(Self) do
    if Value.Equals(Self[i]) then
      Result += i;
end;

function T2DPointArray.Reversed(): T2DPointArray;
var
  lo:PtrUInt;
  p,r:^TPointArray;
begin
  if (Length(Self) = 0) then
    Exit();

  SetLength(Result,length(self));
  p := @Self[high(self)];
  r := @Result[0];

  lo := PtrUInt(@Self[0]);
  while (lo<=PtrUInt(p)) do
  begin
    r^ := p^;
    dec(p);
    inc(r);
  end;
end;

procedure T2DPointArray.Reverse();
var
  tmp:TPointArray;
  lo,hi:^TPointArray;
begin
  if (Length(Self) = 0) then
    Exit();

  lo := @Self[0];
  hi := @Self[High(self)];
  while (PtrUInt(lo)<PtrUInt(hi)) do
  begin
    tmp := hi^;
    hi^ := lo^;
    lo^ := tmp;
    dec(hi);
    inc(lo);
  end;
end;

function T2DPointArray.Combine(Other: T2DPointArray): T2DPointArray; constref;
begin
  SetLength(Result, Length(Self) + Length(Other));
  if Length(self) > 0 then
    MemMove(self[0], result[0], Length(self)*SizeOf(self[0]));
  if Length(Other) > 0 then
    MemMove(Other[0], result[Length(Self)], Length(Other)*SizeOf(Other[0]));
end;   


function T2DPointArray.Equals(Other:T2DPointArray): Boolean;
var i:Int32;
begin
  if (Length(Self) <> Length(Other)) then Exit(False);
  if (Length(Self) = 0) then Exit(True);
  
  for i:=0 to High(self) do
    if not self[i].Equals(Other[i]) then
      Exit(False);
  Result := True;      
end;

function T2DPointArray.Merge(): TPointArray; constref;
begin
  Result := MergeATPA(self);    
end;


procedure T2DPointArray.FilterSize(MinLen:Int32; KeepIf:EComparator=__LT__);
var
  tmp:T2DPointArray;
  TPA:TPointArray;
begin
  for TPA in Self do
    case KeepIf of
      __LT__: if Length(TPA) < MinLen then tmp += TPA;
      __GT__: if Length(TPA) > MinLen then tmp += TPA;
      __EQ__: if Length(TPA) = MinLen then tmp += TPA;
      __NE__: if Length(TPA)<> MinLen then tmp += TPA;
    end;
  self := tmp;
end;

procedure T2DPointArray.FilterSize(MinLen,MaxLen:Int32); overload;
var
  tmp:T2DPointArray;
  TPA:TPointArray;
begin
  for TPA in Self do
    if InRange(Length(TPA), MinLen, MaxLen) then
      tmp += TPA;
  self := tmp;
end;

procedure T2DPointArray.FilterDimensions(MinW,MinH, MaxW,MaxH:Int32); overload;
var
  tmp:T2DPointArray;
  TPA:TPointArray;
begin
  for TPA in Self do
    with GetTPABounds(TPA) do
      if InRange(x2-x1+1, MinW, MaxW) and InRange(y2-y1+1, MinH, MaxH) then
        tmp += TPA;
  self := tmp;
end;

procedure T2DPointArray.SortByMiddle(From: TPoint);
begin
  SortATPAFromMidPoint(Self, From);
end;

procedure T2DPointArray.SortByIndex(From: TPoint; Index:Int32=0);
var
  i: Int32;
  weight: TIntegerArray;
begin
  if (Length(self) <= 1) then Exit;
  SetLength(weight, Length(self));
  for i:=0 to High(self) do
  begin
    if Length(Self[i]) = 0 then continue;
    weight[i] := Round(Sqr(From.x - self[i][Index].x) + Sqr(From.y - self[i][Index].y));
  end;
  QuickATPASort(weight, self, 0, High(self), True);
end;

procedure T2DPointArray.SortBySize(Size:Int32=0; ClosestFirst: Boolean=False);
begin
  SortATPAFromSize(Self, Size, ClosestFirst);
end;


//--| Type helpers (extended) |------------------------------------------------>
//----------------------------------------------------------------------------->

function T2DPointArray.Means(): TPointArray; constref;
var i:Int32;
begin
  SetLength(Result, Length(self));
  for i:=0 to High(Self) do
    Result[i] := MiddleTPA(Self[i]);
end;

function T2DPointArray.ToTBA(): TBoxArray; constref;
var i:Int32;
begin
  SetLength(Result, Length(self));
  for i:=0 to High(Self) do
    Result[i] := GetTPABounds(Self[i]);
end;

function T2DPointArray.Smallest(): TPointArray; constref;
var
  TPA: TPointArray;
begin
  for TPA in Self do
    if (Length(TPA) < Length(Result)) then
      Result := TPA;
end;

function T2DPointArray.Biggest(): TPointArray; constref;
var
  TPA: TPointArray;
begin
  for TPA in Self do
    if (Length(TPA) > Length(Result)) then
      Result := TPA;
end;

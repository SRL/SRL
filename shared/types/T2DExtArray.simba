(*
T2DExtendedArray
================
T2DExtendedArray related methods
*)


type T2DExtArray = T2DExtendedArray;

//--| Type helpers |----------------------------------------------------------->
//----------------------------------------------------------------------------->
procedure T2DExtArray.Append(const Value: TExtendedArray);
var top:Int32;
begin
  top := Length(Self);
  SetLength(self, top+1);
  Self[top] := Value;
end;

procedure T2DExtArray.Insert(const Value: TExtendedArray; Index: Integer);
var
  l: UInt32;
begin
  l := Length(Self);
  if (l <= Index) then
  begin
    Self.Append(Value);
    Exit();
  end;
  
  SetLength(Self, l + 1);
  MemMove(Self[Index], self[Index + 1], (L - Index) * SizeOf(self[0]));
  Self[Index] := Value;
end;

procedure T2DExtArray.Del(const Index:Int32; const Count:Int32=1);
begin
  Delete(Self, Index, Count);
end;

function T2DExtArray.Len(): Integer;
begin
  Result := Length(Self);
end;

procedure T2DExtArray.Remove(const Value: TExtendedArray; const All: Boolean = False);
var
  i: Int32;
  lst: TIntegerArray;
begin
  if (not All) then
  begin
    i := Self.Find(Value);
    if i >= 0 then Self.Del(i);
    Exit;
  end;
  
  lst := Self.FindAll(Value);
  for i:=High(lst) downto 0 do
    Self.Del(lst[i]);
end;

function T2DExtArray.Pop(): TExtendedArray;
var
  h: Integer;
begin
  h := High(Self);
  Result := Self[h];
  SetLength(Self, h);
end;

procedure T2DExtArray.Extend(Arr:T2DExtArray);
var
  i: Int32;
begin
  for i := 0 to High(Arr) do
    Self := Self + Copy(Arr[i]);
end;

function T2DExtArray.Find(const Value: TExtendedArray): Integer; constref;
begin
  for Result:=0 to High(Self) do
    if Self[Result].Equals(Value) then
      Exit;
  Result := -1;
end;

function T2DExtArray.FindAll(const Value: TExtendedArray): TIntegerArray; constref;
var
  i: UInt32;
begin
  for i:=0 to High(Self) do
    if Value.Equals(Self[i]) then
      Result += i;
end;

function T2DExtArray.Reversed(): T2DExtArray;
var
  lo:PtrUInt;
  p,r:^TExtendedArray;
begin
  if (Length(Self) = 0) then
    Exit();

  SetLength(Result,length(self));
  p := @Self[high(self)];
  r := @Result[0];

  lo := PtrUInt(@Self[0]);
  while (lo<=PtrUInt(p)) do
  begin
    r^ := p^;
    dec(p);
    inc(r);
  end;
end;

procedure T2DExtArray.Reverse();
var
  tmp:TExtendedArray;
  lo,hi:^TExtendedArray;
begin
  if (Length(Self) = 0) then
    Exit();

  lo := @Self[0];
  hi := @Self[High(self)];
  while (PtrUInt(lo)<PtrUInt(hi)) do
  begin
    tmp := hi^;
    hi^ := lo^;
    lo^ := tmp;
    dec(hi);
    inc(lo);
  end;
end;

function T2DExtArray.Combine(Other: T2DExtArray): T2DExtArray; constref;
begin
  SetLength(Result, Length(Self) + Length(Other));
  if Length(self) > 0 then
    MemMove(self[0], result[0], Length(self)*SizeOf(self[0]));
  if Length(Other) > 0 then
    MemMove(Other[0], result[Length(Self)], Length(Other)*SizeOf(Other[0]));
end;   


function T2DExtArray.Equals(Other:T2DExtArray): Boolean;
var i:Int32;
begin
  if (Length(Self) <> Length(Other)) then Exit(False);
  if (Length(Self) = 0) then Exit(True);
  
  for i:=0 to High(self) do
    if not self[i].Equals(Other[i]) then
      Exit(False);
  Result := True;      
end;

function T2DExtArray.Merge(): TExtendedArray;
var i:Int32;
begin
  for i:=0 to High(self) do
    Result.Extend(self[i]);  
end;

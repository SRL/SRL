(*
Drawing
=======
The drawing file holds TMufasaBitmap drawing functions to aid drawing onto bitmaps.

The source for this file can be found `here <https://github.com/SRL/SRL/blob/master/shared/drawing.simba>`.
*)

type
  TColorArray = array of TColor;

(*
const __SHADOW_COLOR
~~~~~~~~~~~~~~~~~~~~
Integer constant that stores the shadow color for adding a shadow for text drawing.
*)
const
  __SHADOW_COLOR = 65536;

  
(*
TMufasaBitmap.FromClient
~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.FromClient(Area: TBox);

Copy client to bitmap.
*)
procedure TMufasaBitmap.FromClient(Area: TBox=[0,0,-1,-1]);
var 
  W,H: Int32;
  m: TMufasaBitmap;
begin
  client.GetIOManager.GetDimensions(W,H);
  if Area = TBox([0,0,-1,-1]) then Area := [0,0,W-1,H-1];
  if (self <> nil) and (self.GetIndex() <> -1) then self.Free();
  Self.Init(client.GetMBitmaps);
  Self.CopyClientToBitmap(client.GetIOManager, True, Area.X1, Area.Y1, Area.X2, Area.Y2);
end;
  
(*
TMufasaBitmap.Clear
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.Clear();

Will clear the entire TMufasaBitmap

.. note::

    - by Ollybest
    - Last Updated: 19 July 2013 by Ollybest

Example:

.. code-block:: pascal

    image.Clear();

*)
procedure TMufasaBitmap.Clear();
begin
  self.DrawClear(0);
end;

(*
TMufasaBitmap.ClearArea
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.ClearArea(area: TBox);

Will clear the desired area of the TMufasaBitmap

.. note::

    - by Ollybest
    - Last Updated: 19 July 2013 by Ollybest

Example:

.. code-block:: pascal

    image.ClearArea(intToBox(5, 5, 10, 10));

*)
procedure TMufasaBitmap.ClearArea(area: TBox);
begin
  self.Rectangle(area, 0);
end;


(*
TMufasaBitmap.ClearAllBut
~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.ClearAllBut(Area: TBox);

Will clear the image, except for the given area.
*)
procedure TMufasaBitmap.ClearAllBut(Area: TBox);
var
  CL: TBox;
begin
  CL := [0, 0, Self.GetWidth()-1, Self.GetHeight()-1];
  Area.X1 := Max(CL.X1, Area.X1-1); 
  Area.X2 := Min(CL.X2, Area.X2+1);
  Area.Y1 := Max(CL.Y1, Area.Y1-1); 
  Area.Y2 := Min(CL.Y2, Area.Y2+1);
  
  Self.Rectangle(TBox([CL.X1,   CL.Y1,   Area.x1, Area.y1]), 0);  //Top Left
  Self.Rectangle(TBox([CL.X1,   Area.y1, Area.x1, Area.y2]), 0);  //Mid Left
  Self.Rectangle(TBox([CL.X1,   Area.y1, Area.x1, CL.y2  ]), 0);  //Btm Left
  Self.Rectangle(TBox([Area.x1, CL.Y1,   Area.x2, Area.y1]), 0);  //Top Mid
  Self.Rectangle(TBox([Area.x1, Area.y2, Area.x2, CL.y2  ]), 0);  //Btm Mid
  Self.Rectangle(TBox([Area.x2, CL.Y1,   CL.x2,   Area.y1]), 0);  //Top Right
  Self.Rectangle(TBox([Area.x2, Area.y1, CL.x2,   Area.y2]), 0);  //Mid Right
  Self.Rectangle(TBox([Area.x2, Area.y1, CL.x2,   CL.y2  ]), 0);  //Btm Right
end;

(*
TMufasaBitmap.AvgBrightness
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.AvgBrightness(Area: TBox = [0,0,-1,-1]);

Returns a value between 0 and 100 that defines how bright the image is.
*)
function TMufasaBitmap.AvgBrightness(Area: TBox = [0,0,-1,-1]): Int32; constref;
var
  x,y,t: Int64;
  px:TRGB32;
begin
  if Area.X2 < 0 then Area.X2 := self.GetWidth()-Area.X2;
  if Area.Y2 < 0 then Area.Y2 := self.GetHeight()-Area.Y2;

  for y:=Area.Y1 to Area.Y2 do
  begin
    t := 0;
    for x:=Area.X1 to Area.X2 do
    begin
      px := TRGB32(self.GetPixel(x,y));
      t += Round((px.R+px.G+px.B) / 3 * 0.392);
    end;
    Result += t div self.GetWidth();
  end;
  Result /= self.GetHeight();
end;


(*
TMufasaBitmap.PeakBrightness
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.PeakBrightness(Area: TBox = [0,0,-1,-1]);

Returns the maximum brightness in the image in the range `0..100`.
*)
function TMufasaBitmap.PeakBrightness(Area: TBox = [0,0,-1,-1]): Int32; constref;
var
  x,y,t: Int64;
  px:TRGB32;
begin
  if Area.X2 < 0 then Area.X2 := self.GetWidth() + Area.X2;
  if Area.Y2 < 0 then Area.Y2 := self.GetHeight() + Area.Y2;

  for y:=Area.Y1 to Area.Y2 do
    for x:=Area.X1 to Area.X2 do
    begin 
      px := TRGB32(self.GetPixel(x,y));
      t := Max(Max(px.R,px.G),px.B);
      if t > Result then Result := t;
    end;
  Result := Round(Result / 255 * 100);
end;


(*
TMufasaBitmap.DrawBox
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.DrawBox(box: TBox; fill: boolean; color: TColor);

Draws a TBox onto the TMufasaBitmap

.. note::

    - by Ollybest
    - Last Updated: 19 July 2013 by Ollybest

Example:

.. code-block:: pascal

    image.DrawBox(intToBox(50, 50, 345, 345), false, clLime);

*)
procedure TMufasaBitmap.DrawBox(box: TBox; fill: boolean; color: TColor);
var
  TPA: TPointArray;
begin
  if not fill then
  begin
    try
      TPA := EdgeFromBox(box);
    except
      TPA := [Point(box.x1, box.y1)];
    finally
      self.DrawTPA(TPA, color);
    end;
  end else
    self.Rectangle(box, color);
end;

(*
TMufasaBitmap.DrawBox
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.DrawBox(pt:TPoint; Radius:UInt32; Fill: Boolean; color: TColor);

Draws a TBox onto the TMufasaBitmap
*)
procedure TMufasaBitmap.DrawBox(pt:TPoint; Radius:UInt32; fill: Boolean; color: TColor); overload;
var
  TPA: TPointArray;
begin
  if not fill then
  begin
    if Radius = 0 then
      TPA := [pt]
    else
      TPA := EdgeFromBox(TBox([pt.x-Radius,pt.y-Radius, pt.x+Radius,pt.y+Radius]));
    self.DrawTPA(TPA, color);
  end else
    self.Rectangle(TBox([pt.x-Radius,pt.y-Radius, pt.x+Radius,pt.y+Radius]), color);
end;

(*
TMufasaBitmap.DrawBox
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.DrawBox(box:TBox; color:TColor = clRed); overload;

Overloaded function, will draw the outline of the "box" and includes a optional
color parameter (default red).

.. note::

    - by Ollybest
    - Last Updated: 19 August 2013 by Ollybest

Example:

.. code-block:: pascal

    bmp.DrawBox(IntToBox(50, 50, 345, 345));

*)
procedure TMufasaBitmap.DrawBox(box: TBox; color: TColor = clRed); overload;
begin
  self.DrawBox(box, false, color);
end;

(*
TMufasaBitmap.DrawBox; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.DrawBox(x1,y1,x2,y2:Integer; fill:Boolean; color:TColor); overload;

Draws a box using the x1, y1, x2, y2 parameters, will fill if 'fill' is set to
true using color 'color'.

.. note::

    - by Olly
    - Last Updated: 29 October 2013 by Olly

Example:

.. code-block:: pascal

    bmp.DrawBox(Box(50, 50, 345, 345));
*)
procedure TMufasaBitmap.DrawBox(x1,y1,x2,y2:Int32; fill:Boolean; color:TColor); overload;
begin
  self.DrawBox(IntToBox(x1, y1, x2, y2), fill, color);
end;

(*
TMufasaBitmap.DrawClippedBox
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.DrawClippedBox(box: TBox; fill: boolean; color: TColor); overload;

Same as the other TMufasaBitmap.DrawBox but is clipped so it won't draw off the
bounds of the bitmap.

.. note::

    - by Olly
    - Last Updated: 29 October 2013 by Olly

Example:

.. code-block:: pascal

    image.DrawClippedBox(Box(50, 50, 100, 100), true, clLime);
*)
procedure TMufasaBitmap.DrawClippedBox(box: TBox; fill: boolean; color: TColor);
var
  b:TBox;
begin
  b.x1 := Max(box.x1, 0);
  b.y1 := Max(box.y1, 0);
  b.x2 := Min(box.x2, self.GetWidth() - 1);
  b.y2 := Min(box.y2, self.GetHeight() - 1);

  self.DrawBox(b, fill, color);
end;

(*
TMufasaBitmap.DrawBoxes
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.DrawBoxes(boxArr: TBoxArray; fill: boolean; color: TColor);

Draws a TBoxArray onto the TMufasaBitmap.

.. note::

    - by Ollybest
    - Last Updated: 19 July 2013 by Ollybest

Example:

.. code-block:: pascal

    image.DrawBoxes([Box(10, 10, 20, 20), Box(50, 50, 250, 250),
                     Box(440, 440, 600, 600)], true, clRed);

*)
procedure TMufasaBitmap.DrawBoxes(boxArr: TBoxArray; fill: boolean; color: TColor);
var
  i, h:Int32;
begin
  h := High(boxArr);

  for i:=0 to h do
    self.DrawBox(boxArr[i], fill, color);
end;

(*
TMufasaBitmap.DrawBoxes; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.DrawBoxes(boxArr: TBoxArray; fill: boolean; colors: TColorArray); overload;

Same as TMufasaBitmap.DrawBoxes() but accepts a extra paramter that allows a color for each box.

.. note::

    - by Ollybest
    - Last Updated: 19 July 2013 by Ollybest

Example:

.. code-block:: pascal

    image.DrawBoxes([Box(10, 10, 20, 20), Box(50, 50, 250, 250),
                     Box(440, 440, 600, 600)], true, [clRed, clLime, clOrange]);

*)
procedure TMufasaBitmap.DrawBoxes(boxArr: TBoxArray; fill: boolean; colors: TColorArray); overload;
var
  l,i:Int32;
begin
  l := Length(boxArr);

  if (l <> Length(colors)) then
  begin
    WriteLn('-- ERROR: TMufasaBitmap.DrawBoxes(): boxArr/colors lengths differ');
    Exit;
  end;

  for i := 0 to (l-1) do
    self.DrawBox(boxArr[i], fill, colors[i]);
end;

(*
TMufasaBitmap.DrawRect
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.DrawRect(Rect: TRectangle; color: TColor);

Draws a TRectangle onto the TMufasaBitmap
*)
procedure TMufasaBitmap.DrawRect(Rect: TRectangle; color: TColor);
var
  TPA: TPointArray;
begin
  TPA := Rect.ToTPA().Connect();
  FilterPointsBox(TPA, 0,0,Self.GetWidth()-1,Self.GetHeight()-1);
  Self.DrawTPA(TPA, color);
end;

function TMufasaBitmap.DrawCuboid(Top, Btm: TRectangle; color: Int32): Boolean;
begin
  Self.DrawRect([Top.Left, Top.Btm, Btm.Btm, Btm.Left], color);
  Self.DrawRect([Top.Top, Top.Right, Btm.Right, Btm.Top], color);
  Self.DrawRect([Top.Top, Btm.Top, Btm.Left, Top.Left], color);
  Self.DrawRect([Top.Right, Btm.Right, Btm.Btm, Top.Btm], color);
end;

(*
TMufasaBitmap.DrawPoly
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.DrawPoly(Poly: TPointArray; color: TColor);

Draws a polygon onto the TMufasaBitmap
*)
procedure TMufasaBitmap.DrawPoly(Poly: TPointArray; color: TColor);
begin
  Self.DrawTPA(Poly.Connect(), color);
end;

(*
TMufasaBitmap.DrawBitmap
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.DrawBitmap(bmp: Integer; pnt: TPoint);

Draws a bitmap onto the TMufasaBitmap at the desired point.

.. note::

    - by Ollybest
    - Last Updated: 19 July 2013 by Ollybest

Example:

.. code-block:: pascal

    image.DrawBitmap(bmp, point(50, 50));

*)
procedure TMufasaBitmap.DrawBitmap(bmp: Integer; pnt: TPoint);
var
  img:TMufasaBitmap;
begin
  if (BitmapExists(bmp)) then
  begin
    img := GetMufasaBitmap(bmp);
    img.DrawTransparent(pnt.x, pnt.y, self)
  end else
    WriteLn('-- ERROR: TMufasaBitmap.DrawBitmap(): bitmap does not exist');
end;

(*
TMufasaBitmap.DrawBitmap; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TMufasaBitmap.DrawBitmap(path: string; pt: TPoint): boolean; overload;

Same as TMufasaBitmap.DrawBitmap but will load a bitmap from a file specified
by the paramter "path", will return if succesful or not.

.. note::

    - by Ollybest
    - Last Updated: 19 July 2013 by Ollybest

Example:

.. code-block:: pascal

    image.DrawBitmap('simba/scripts/foo.png', point(11, 11));

*)
function TMufasaBitmap.DrawBitmap(path: string; pt: TPoint): boolean; overload;
var
  bmp:Integer;
begin
  result := FileExists(path);

  if not result then
  begin
    WriteLn('-- ERROR: TMufasaBitmap.DrawBitmap(): File path does not exist ("' + path + '"), result = false');
    exit;
  end;

  bmp := LoadBitmap(path);
  self.DrawBitmap(bmp, pt);
  FreeBitmap(bmp);
end;

(*
TMufasaBitmap.DrawCross
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.DrawCross(pt: TPoint; size: Integer; color: TColor);

Draws a cross on the TMufasaBitmap at the TPoint ``pt`` with the desired size.

.. note::

    - by Ollybest
    - Last Updated: 19 July 2013 by Ollybest

Example:

.. code-block:: pascal

    image.DrawCross(Point(200, 200), 4, clLime);

*)
procedure TMufasaBitmap.DrawCross(pt: TPoint; Radius: Integer; color: TColor);
begin
  Radius := Round(Radius/2*Sqrt(2));
  if (Radius < 1) then
    exit();

  try self.LineTo(Point(pt.x - Radius, pt.y - Radius), Point(pt.x + Radius, pt.y + Radius), color);
  except end;
  try self.LineTo(Point(pt.x + Radius, pt.y - Radius), Point(pt.x - Radius, pt.y + Radius), color);
  except end;
end;

(*
TMufasaBitmap.DrawEllipse
~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.DrawEllipse(const pnt: TPoint; const xRadius, yRadius: Integer; const fill: boolean; const color: TColor);

Draws an ellipse on the TMufasaBitmap defined by 'pnt', 'xRadius', and
'yRadius'. If 'fill' is true it will fill the ellipse, otherwise it draws just
the border.

.. note::

    - by Ollybest
    - Last Updated: 19 July 2013 by Ollybest

Example:

.. code-block:: pascal

    image.DrawEllipse(point(500, 500), 20, 50, true, clLime);

*)
procedure TMufasaBitmap.DrawEllipse(const pnt: TPoint; const xRadius, yRadius: Integer; const fill: boolean; const color: TColor);
var
  tpa: TPointArray;
begin
  tpa := TPAFromEllipse(pnt.x, pnt.y, xRadius, yRadius);

  if (fill) then
    FillEllipse(tpa);

  self.DrawTPA(tpa, color);
end;

(*
TMufasaBitmap.DrawCircle
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.DrawCircle(pnt: TPoint; radius: Integer; fill: boolean; color: TColor);

Draws a circle on the TMufasaBitmap defined by 'pnt' and 'radius'. If 'fill'
is true it will fill the circle, otherwise it draws just the border.

.. note::

    - by Ollybest
    - Last Updated: 19 July 2013 by Ollybest

Example:

.. code-block:: pascal

    image.DrawCircle(point(500, 500), 50, false, clLime);

*)
procedure TMufasaBitmap.DrawCircle(pnt: TPoint; radius: Integer; fill: boolean; color: TColor);
begin
  self.DrawEllipse(pnt, radius, radius, fill, color);
end;

(*
TMufasaBitmap.DrawPolygon
~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.DrawPolygon(polygonPnts: TPointArray; color: TColor);

Draws a line between all the points(polygonPnts) to draw a polygon-like shape on
the TMufasaBitmap.

.. note::

    - by Ollybest
    - Last Updated: 19 July 2013 by Ollybest

Example:

.. code-block:: pascal

    image.DrawPolygon([point(10, 10), point(100, 100), point(500, 500), point(230, 555)], clLime);

*)
procedure TMufasaBitmap.DrawPolygon(polygonPnts: TPointArray; color: TColor);
var
  i, h: Integer;
begin
  h := (High(polygonPnts) - 1);

  if (h = -1) then
    exit();

  for i := 0 to h do
    self.LineTo(polygonPnts[i], polygonPnts[i + 1], color);

  self.LineTo(polygonPnts[h + 1], polygonPnts[0], color);
end;

(*
TMufasaBitmap.DrawClippedText
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.DrawClippedText(txt: string; pt: TPoint; font: string; shadow: boolean; color: TColor);

Same as drawText, but is clipped so it won't draw off the bounds of the bitmap.

.. note::

    - by Ollybest
    - Last Updated: 19 July 2013 by Ollybest

Example:

.. code-block:: pascal

    image.DrawClippedText('hello world!', point(55, 55), 'StatChars', true, clLime);
*)
procedure TMufasaBitmap.DrawClippedText(txt: string; pt: TPoint; font: string; shadow: boolean; color: TColor);
var
  tpa, tpaShadow: TPointArray;
  w,h: Int32;
begin
  {$IFDEF SIMBAMAJOR1200}
  with client.GetMOCR() do TPA := TextToFontTPA(txt, font, w,h);
  {$ELSE} //-- Simba 1300
  TPAFromText(txt, font, w,h);
  {$ENDIF}
  OffsetTPA(TPA, pt);

  if (shadow) then
  begin
    tpaShadow := CopyTPA(tpa);
    OffsetTPA(tpaShadow, point(1, 1));
    FilterPointsBox(tpaShadow, 0, 0, self.GetWidth()-1, self.GetHeight()-1);
    self.DrawTPA(tpaShadow, __SHADOW_COLOR);
  end;

  FilterPointsBox(tpa, 0, 0, self.GetWidth()-1, self.GetHeight()-1);
  self.DrawTPA(tpa, color);
end;

procedure TMufasaBitmap.DrawText(txt: String; pt: TPoint; Color: TColor); overload;
begin
  Self.DrawText(txt, 'StatChars07', pt, True, Color);
end;

(*
TMufasaBitmap.DrawTextArray
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.DrawTextArray(txtArr: TStringArray; pts: TPointArray; font: string; shadow: boolean; color: TColor);

Draws an array of text on the TMufasaBitmap, each index in the textArr will be
be drawn at the same point in the pnt array.

.. note::

    - by Ollybest
    - Last Updated: 19 July 2013 by Ollybest

Example:

.. code-block:: pascal

    image.drawTextArray(['hello', 'world'], [point(50, 50), point(100, 111)], bigchars, false, clBlue);

*)
procedure TMufasaBitmap.DrawTextArray(txtArr: TStringArray; pts: TPointArray; font: string; shadow: boolean; color: TColor);
var
  i, l: Integer;
begin
  l := Length(txtArr);

  if (l <> Length(pts)) then
  begin
    WriteLn('-- ERROR: TMufasaBitmap.DrawTextArray(): txtArr/pts length differ');
    exit();
  end;

  for i := 0 to (l -1) do
    self.DrawText(txtArr[i], font, pts[i], shadow, color);
end;

(*
TMufasaBitmap.DrawTextLines
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.DrawTextLines(txtArr: TStringArray; pnt: TPoint; font: string; shadow: boolean; color: TColor);

Draws text onto the TMufasaBitmap, each index in the txtArr is put on a different line.

.. note::

    - by Ollybest
    - Last Updated: 19 July 2013 by Ollybest

**Example:**

.. code-block:: pascal

    image.drawTextLines(['olly', 'is', 'the', 'best', ':D'], point(2, 2), statChars, false, clRed);

*)
procedure TMufasaBitmap.DrawTextLines(txtArr: TStringArray; pnt: TPoint; font: string; shadow: boolean; color: TColor);
var
  ATPA: T2DPointArray;
  TPA, shadowTPA: TPointArray;
  w, h, i, l: Integer;
begin
  l := Length(txtArr);
  setLength(ATPA, l);

  for i := 0 to (l-1) do
  begin
    ATPA[i] := TPAFromText(txtArr[i], font, w, h);
    OffsetTPA(ATPA[i], point(pnt.x, pnt.y + 1 + (i * h)));
  end;

  TPA := MergeATPA(ATPA);

  if (shadow) then
  begin
    shadowTPA := CopyTPA(TPA);
    OffsetTPA(shadowTPA, Point(1, 1));
    self.DrawTPA(shadowTPA, __SHADOW_COLOR);
  end;

  self.DrawTPA(TPA, color);
end;

(*
TMufasaBitmap.Debug
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.Debug();

Will display the TMufasaBitmap in Simba's debug image form. Note: will only
work if the bitmap is managed by Simba

.. note::

    - by Ollybest
    - Last Updated: 19 July 2013 by Ollybest

**Example:**

.. code-block:: pascal

    Image.Debug();
    // or for a non TMufasaBitmap
    GetMufasaBitmap(bitmap).Debug();
*)
procedure TMufasaBitmap.Debug(); constref;
begin
  if (not BitmapExists(self.GetIndex())) then
  begin
    WriteLn('-- ERROR: Cannot debug the bitmap because it is not managed by Simba');
    WriteLn('-- HINT: Example for a managed bitmap is "TMufasaBitmap.Init(client.GetMBitmaps());"');
    Exit();
  end;

  ClearDebugImg();
  DisplayDebugImgWindow(self.GetWidth(), self.GetHeight());
  DrawBitmapDebugImg(self.GetIndex());
end;

(*
TMufasaBitmap.DebugEx
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TMufasaBitmap.DebugEx(SetManaged: Boolean=True; MinSize: Int32=128); constref;

Will display the TMufasaBitmap in Simba's debug image form. Note that if the
bitmap isn't managed by Simba it will be added if ``SetManaged`` is ``True``.
Alterantive parameter ``MinSize`` is used to better display small images.

**Example:**

pascal::
    Image.DebugEx();
    // or for a non TMufasaBitmap
    GetMufasaBitmap(bitmap).DebugEx();
*)
procedure TMufasaBitmap.DebugEx(SetManaged: Boolean=True; MinSize: Int32=128); constref;
var
  nW,nH, W,H, x1,y1:Int32;
  tmp: TMufasaBitmap;
begin
  if SetManaged and (not BitmapExists(Self.GetIndex())) then
    client.GetMBitmaps().AddBMP(Self);

  if (not BitmapExists(self.GetIndex())) then
  begin
    WriteLn('-- ERROR: Cannot debug the bitmap because it is not managed by Simba');
    WriteLn('-- HINT: Example for a managed bitmap is "TMufasaBitmap.Init(client.GetMBitmaps());"');
    Exit();
  end;

  GetBitmapSize(Self.GetIndex(), W,H);
  if (W < 128) or (H < 128) then
  begin
    nW := Max(128, W);
    nH := Max(128, H);
    DisplayDebugImgWindow(nW,nH);

    tmp := GetMufasaBitmap(CreateBitmap(nW,nH));
    tmp.ReplaceColor(0, 15790320);
    x1 := Trunc(nW / 2 - W / 2);
    y1 := Trunc(nH / 2 - H / 2);
    WriteLn([x1,y1]);
    Self.DrawTransparent(x1,y1, tmp);
    DrawBitmapDebugImg(tmp.GetIndex());
    tmp.Free();
  end else
  begin
    DisplayDebugImgWindow(W,H);
    DrawBitmapDebugImg(Self.GetIndex());
  end;
end;

(*
TMufasaBitmap.UpdateDebugImage
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.UpdateDebugImage();

Will update Simba's debug image form with the current image. 
*)
procedure TMufasaBitmap.UpdateDebugImage(); constref;
begin
  if (not BitmapExists(self.GetIndex())) then
  begin
    WriteLn('-- ERROR: Cannot debug the bitmap because it is not managed by Simba');
    WriteLn('-- HINT: Example for a managed bitmap is "TMufasaBitmap.Init(client.GetMBitmaps());"');
    Exit;
  end;
  
  DrawBitmapDebugImg(self.GetIndex());
  DisplayDebugImgWindow(self.GetWidth(), self.GetHeight());
end;

(*
TMufasaBitmap.DebugTPA
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.DebugTPA(tpa: TPointArray; drawPoints: boolean = true);

Will debug a TPointArray onto the TMufasaBitmap, parameter drawPoints is a optional
parameter and by default is enabled, if enabled it will draw the points in the array.

.. note::

    - by Ollybest
    - Last Updated: 19 July 2013 by Ollybest

Example:

.. code-block:: pascal

    image.DebugTPA(tpa);
*)
procedure TMufasaBitmap.DebugTPA(tpa: TPointArray; drawPoints: Boolean = True);
var
  mid: TPoint;
  l: Int32;
  b: TBox;
begin
  b := GetTPABounds(tpa);
  mid := MiddleTPA(tpa);
  l := Length(tpa);

  if (l < 1) then
    exit();

  if (drawPoints) then
    self.DrawTPA(tpa, clWhite);

  self.DrawBox(b, false, clRed);
  self.DrawCross(mid, 5, clPurple);
  self.DrawText('TPA Length: ' + ToStr(l), Point(b.x1+2, b.y1+2), clLime);
end;

(*
TMufasaBitmap.DebugATPA
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.DebugATPA(const ATPA: T2DPointArray);

Will debug a T2DPointArray onto the TMufasaBitmap.

.. note::

    - by Ollybest
    - Last Updated: 19 July 2013 by Ollybest

Example:

.. code-block:: pascal

    image.DebugATPA(ATPA);
*)
procedure TMufasaBitmap.DebugATPA(const ATPA: T2DPointArray);
var
  i, l, c: Int32;
  b: TBox;
  colArr: array [0..9] of TColor;
  mid: TPoint;
begin
  colArr := [clAqua, clBlue, clFuchsia, clLime, clMaroon,
             clOrange, clNavy, clYellow, clRed, clWhite];

  l := Length(ATPA);
  c := 0;

  if (l < 1) then
    exit();

  for i := 0 to (l-1) do
  begin
    b := GetTPABounds(ATPA[i]);
    mid := MiddleTPA(ATPA[i]);

    self.DrawBox(b, false, colArr[c]);
    self.DrawCross(mid, 3, colArr[c]);
    self.DrawText(intToStr(i), point(b.x1 + 2, b.y1 + 2), colArr[c]);

    Inc(c);

    if (c > High(colArr)) then
      c := 0;
  end;
end;

(*
TMufasaBitmap.DebugDTM
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMufasaBitmap.DebugDTM(dtm: Integer; area: TBox; color: TColor);

Will search for the dtm in the desired area, drawing a cross at each point that
is found.

.. note::

    - by Ollybest
    - Last Updated: 19 July 2013 by Ollybest

Example:

.. code-block:: pascal

    image.DebugDTM(myDTM, mainScreen.getBounds(), clRed);
*)
procedure TMufasaBitmap.DebugDTM(dtm: Integer; area: TBox; color: TColor);
var
  tpa: TPointArray;
  atpa: T2DPointArray;
  l, i: Integer;
  b: TBox;
const
  CROSS_SIZE = 4;
begin
  if (not DTMExists(dtm)) then
  begin
    WriteLn('-- ERROR: TMufasaBitmap.DebugDTM(): The DTM you entered does not exist');
    exit();
  end;

  FindDTMs(dtm, tpa, area);
  ClearDoubleTPA(tpa);

  l := Length(tpa);
  SetLength(atpa, l);

  if (l < 1) then
    exit();

  for i := 0 to (l-1) do
  begin
    b := IntToBox(tpa[i].x - CROSS_SIZE, tpa[i].y - CROSS_SIZE,
                  tpa[i].x + CROSS_SIZE, tpa[i].y + CROSS_SIZE);

    atpa[i] := MergeATPA([tpaFromLine(b.x1, b.y1, b.x2, b.y2),
                          tpaFromLine(b.x2, b.y1, b.x1, b.y2)]);
  end;

  tpa := MergeATPA(atpa);
  // a cross could draw off the bitmap
  FilterPointsBox(tpa, area.x1, area.y1, area.x2, area.y2);

  self.DrawTPA(tpa, color);
end;

procedure TMufasaBitmap.DrawCrosshairs(const box: TBox; const pt: TPoint; const color: TColor; const boxColor: Integer = -1);
begin
  self.Rectangle(TBox([box.x1, box.y1 + pt.y, box.x2, box.y1 + pt.y]), color); // faster than LineTo :)
  self.Rectangle(TBox([box.x1 + pt.x, box.y1, box.x1 + pt.x, box.y2]), color);

  if (boxColor > -1) then
    self.DrawBox(box, false, boxColor);
end;

procedure TMufasaBitmap.DrawTPARainbow(var TPA: TPointArray);
var
  i, j, h, x, w, hei: Integer;
  fraction, m: Double;
  mt: Byte;
  ptr: PRGB32;
  new: TPointArray;
begin
  h := High(TPA);
  if (h < 0) then
    Exit;

  j := 0;
  SetLength(new, h+1);

  w := Self.getWidth();
  hei := Self.getHeight();
  ptr := Self.getData();

  for i := 0 to High(TPA) do
  begin
    if (TPA[i].X < 0) or (TPA[i].Y < 0) or (TPA[i].X >= w) or (TPA[i].Y >= hei) then
      Continue;
    new[Inc(j)-1] := TPA[i];
    fraction := i / h;
    if (fraction <= 0) then
      m := 0
    else if (fraction >= 1) then
      m := 6
    else
      m := fraction * 6;

    x := TPA[i].Y * w + TPA[i].X;
    mt := (round(frac(m) * $FF));
    case Trunc(m) of
    0:
      begin
        ptr[x]^.R := $FF;
        ptr[x]^.G := mt;
        ptr[x]^.B := 0;
      end;
    1:
      begin
        ptr[x]^.R := $FF - mt;
        ptr[x]^.G := $FF;
        ptr[x]^.B := 0;
      end;
    2:
      begin
        ptr[x]^.R := 0;
        ptr[x]^.G := $FF;
        ptr[x]^.B := mt;
      end;
    3:
      begin
        ptr[x]^.R := 0;
        ptr[x]^.G := $FF - mt;
        ptr[x]^.B := $FF;
      end;
    4:
      begin
        ptr[x]^.R := mt;
        ptr[x]^.G := 0;
        ptr[x]^.B := $FF;
      end;
    5:
      begin
        ptr[x]^.R := $FF;
        ptr[x]^.G := 0;
        ptr[x]^.B := $FF - mt;
       end;
    end;
  end;

  SetLength(new, j);
  TPA := new;
end;
procedure Debug(TPA: TPointArray; Color: TColor = $0000FF); overload;
var
  BMP: TMufasaBitmap;
begin
  TPA := TPA.FilterBox(GetClientBounds());

  BMP.FromClient();
  BMP.DrawTPA(TPA, Color);
  BMP.Debug();
  BMP.Free();
end;

procedure Debug(ATPA: T2DPointArray); overload;
var
  BMP: TMufasaBitmap;
  TPA: TPointArray;
begin
  BMP.FromClient();

  for TPA in ATPA do
    BMP.DrawTPA(TPA.FilterBox(GetClientBounds()), Random($FFFFFF));

  BMP.Debug();
  BMP.Free();
end;

procedure Debug(R: TRectangle; Color: TColor = $0000FF); overload;
begin
  Debug(R.ToTPA.Connect(), Color);
end;

procedure Debug(B: TBox; Color: TColor = $0000FF); overload;
begin
  Debug(EdgeFromBox(B), Color);
end;
